package business{	/**	 * RED5 Open Source Flash Server - http://www.osflash.org/red5	 *	 * Copyright (c) 2006-2009 by respective authors (see below). All rights reserved.	 *	 * This library is free software; you can redistribute it and/or modify it under the	 * terms of the GNU Lesser General Public License as published by the Free Software	 * Foundation; either version 2.1 of the License, or (at your option) any later	 * version.	 *	 * This library is distributed in the hope that it will be useful, but WITHOUT ANY	 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A	 * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.	 *	 * You should have received a copy of the GNU Lesser General Public License along	 * with this library; if not, write to the Free Software Foundation, Inc.,	 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA	 */	import flash.errors.IOError;	import flash.events.AsyncErrorEvent;	import flash.events.IOErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.net.NetConnection;	import flash.net.ObjectEncoding;		import model.DataModel;		import mx.rpc.IResponder;
	/**	 *	 * @author Thijs Triemstra, Babelium Team	 *	 */	public class NetConnectionDelegate	{			private var _dataModel:DataModel=DataModel.getInstance();		private var responder:IResponder;		private var netConnection:NetConnection=_dataModel.netConnection;		public function NetConnectionDelegate(res:IResponder)		{						_dataModel.netConnection=new NetConnection();			// Listen and capture the NetConnection info and error events.			responder=res;					}		/**		 *		 * @param uri		 * @param proxy		 * @param encoding		 */		public function connect(uri:String, proxy:String, encoding:uint):void		{			//We check if another connect attempt is still ongoing			if (!_dataModel.netConnectOngoingAttempt)			{								_dataModel.netConnectOngoingAttempt = true;								// Initialize the NetConnection in the model.				netConnection=_dataModel.netConnection;				netConnection.client=responder;				netConnection.objectEncoding=encoding;				netConnection.proxyType=proxy;				// Setup the NetConnection and listen for NetStatusEvent and SecurityErrorEvent events.				netConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatus);				netConnection.addEventListener(AsyncErrorEvent.ASYNC_ERROR, netASyncError);				netConnection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, netSecurityError);				netConnection.addEventListener(IOErrorEvent.IO_ERROR, netIOError);				// connect to server				try				{					trace("Connecting to " + uri);					// Create connection with the server.					netConnection.connect(uri);				}				catch (e:ArgumentError)				{					// Invalid parameters.					switch (e.errorID)					{						case 2004:							trace("Invalid server location: " + uri);							_dataModel.netConnectOngoingAttempt = false;							_dataModel.netConnected=false;							break;						default:							_dataModel.netConnectOngoingAttempt = false;							_dataModel.netConnected=false;							break;					}				}				catch (e:IOError)				{					_dataModel.netConnectOngoingAttempt = false;					_dataModel.netConnected=false;				}				catch (e:SecurityError)				{					_dataModel.netConnectOngoingAttempt = false;					_dataModel.netConnected=false;				}			}		}		/**		 *		 *		 */		public function close():void		{			// Close the NetConnection.			if(netConnection){				netConnection.close();			}		}		/**		 *		 * @param event		 */		protected function netStatus(event:NetStatusEvent):void		{			_dataModel.netConnectOngoingAttempt = false;			// Pass NetStatusEvent to SetupConnectionCommand.			this.responder.result(event);		}		/**		 *		 * @param event		 */		protected function netSecurityError(event:SecurityErrorEvent):void		{			_dataModel.netConnectOngoingAttempt = false;			// Pass SecurityErrorEvent to SetupConnectionCommand.			responder.fault(new SecurityErrorEvent(SecurityErrorEvent.SECURITY_ERROR, false, true, "Security error - " + event.text));		}		/**		 *		 * @param event		 */		protected function netIOError(event:IOErrorEvent):void		{			_dataModel.netConnectOngoingAttempt = false;			// Pass IOErrorEvent to SetupConnectionCommand.			responder.fault(new IOErrorEvent(IOErrorEvent.IO_ERROR, false, true, "Input/output error - " + event.text));		}		/**		 *		 * @param event		 */		protected function netASyncError(event:AsyncErrorEvent):void		{			_dataModel.netConnectOngoingAttempt = false;			// Pass AsyncErrorEvent to SetupConnectionCommand.			responder.fault(new AsyncErrorEvent(AsyncErrorEvent.ASYNC_ERROR, false, true, "Asynchronous code error - " + event.error));		}	}}